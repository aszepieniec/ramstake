# This file was *autogenerated* from the file test.sage
from sage.all_cmdline import *   # import sage library
_sage_const_3 = Integer(3); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0)
import sys
load("ramstake.sage")
from csprng import csprng

def test( num_trials, seed ):


    rng = csprng()
    rng.seed(seed)
    print "randomness byte:", hexlify(rng.generate(_sage_const_1 ))
    print "randomness:", rng.generate_ulong()

    print "num trials:", num_trials

    if num_trials == _sage_const_1 :
        kat = _sage_const_2 
    else:
        kat = _sage_const_0 
    num_successes = _sage_const_0 
    num_integrity_failures = _sage_const_0 
    num_decoding_failures = _sage_const_0 
    for trial_index in range(_sage_const_0 , num_trials):
        sk, pk = ramstake_keygen(rng.generate(RAMSTAKE_SEED_LENGTH), kat)
        sk_bytes = ramstake_export_secret_key(sk)
        #print "serialization of secret key:", hexlify(sk_bytes)

        c, k1 = ramstake_encaps(rng.generate(RAMSTAKE_SEED_LENGTH), pk, kat)
        val = ramstake_decaps(c, sk, kat)

        if type(val) != type(_sage_const_1 ):
            k2 = val
            num_successes += _sage_const_1 
        elif val == -_sage_const_1 :
            num_decoding_failures += _sage_const_1 
        elif val == -_sage_const_2 :
            num_integrity_failures += _sage_const_1 

    print "Ran", num_trials, "trials with", num_successes, "successes and", (num_integrity_failures + num_decoding_failures), "failures."
    print "Failures:"
    print " *", num_decoding_failures, "decoding errors"
    print " *", num_integrity_failures, "integrity errors"
    print "Successes:"
    print " *", num_successes, "total successes"

if len(sys.argv) != _sage_const_3  or len(sys.argv[_sage_const_2 ]) % _sage_const_2  != _sage_const_0 :
    print "usage: sage test [num trials, eg 13] [random seed in hex, eg d13d13deadbeef]"
else:
    arg2 = bytearray(sys.argv[_sage_const_2 ].decode('hex'))
    test(int(sys.argv[_sage_const_1 ]), bytearray(arg2))

