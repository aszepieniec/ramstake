#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <gmp.h>
#include <time.h>

#include "ramstake.h"
#include "csprng.h"

int main( int argc, char ** argv )
{
    unsigned long randomness;
    csprng rng;
    int i;
    int num_trials, trial_index;
    int num_successes;
    int num_decaps_failures, num_equals_failures;
    int trial_success;

    unsigned char * rng_seed;

    ramstake_public_key pk;
    ramstake_secret_key sk;
    ramstake_ciphertext c;

    unsigned char * sk_seed;
    unsigned char * c_seed;
    unsigned char * pk_bytes;
    unsigned char * sk_bytes;
    unsigned char * c_bytes;
    unsigned char * key1;
    unsigned char * key2;

    struct timespec clock_total_start;
    struct timespec clock_total_stop;
    struct timespec clock_keygen_start;
    struct timespec clock_keygen_stop;
    struct timespec clock_encaps_start;
    struct timespec clock_encaps_stop;
    struct timespec clock_decaps_start;
    struct timespec clock_decaps_stop;
    struct timespec clock_verify_start;
    struct timespec clock_verify_stop;

    if( argc != 3 || strlen(argv[2]) % 2 != 0 )
    {
        printf("usage: ./test [num trials, eg 13] [random seed, eg d13d13deadbeef]\n");
        return 0;
    }

    /* grab randomness */
    csprng_init(&rng);

    rng_seed = malloc(strlen(argv[2])/2);
    for( i = 0 ; i < strlen(argv[2])/2 ; ++i )
    {
        sscanf(argv[2] + 2*i, "%2hhx", &rng_seed[i]);
    }
    csprng_seed(&rng, strlen(argv[2])/2, rng_seed);
    free(rng_seed);

    randomness = csprng_generate_ulong(&rng);

    printf("randomness: %lu\n", randomness);

    /* grab trial number */
    num_trials = atoi(argv[1]);
    printf("num trials: %i\n", num_trials);

    /* allocate memory */
    sk_seed = malloc(RAMSTAKE_SEED_LENGTH * num_trials);
    csprng_generate(&rng, RAMSTAKE_SEED_LENGTH * num_trials, sk_seed);
    c_seed = malloc(RAMSTAKE_SEED_LENGTH * num_trials);
    csprng_generate(&rng, RAMSTAKE_SEED_LENGTH * num_trials, c_seed);
    pk_bytes = malloc(RAMSTAKE_PUBLIC_KEY_LENGTH * num_trials);
    sk_bytes = malloc(RAMSTAKE_SECRET_KEY_LENGTH * num_trials);
    c_bytes = malloc(RAMSTAKE_CIPHERTEXT_LENGTH * num_trials);
    key1 = malloc(RAMSTAKE_KEY_LENGTH * num_trials);
    key2 = malloc(RAMSTAKE_KEY_LENGTH * num_trials);

    /* run trials */
    num_decaps_failures = 0;
    clock_gettime(CLOCK_PROCESS_CPUTIME_ID, &clock_total_start);
    for( trial_index = 0 ; trial_index < num_trials ; ++trial_index )
    {

        ramstake_public_key_init(&pk);
        ramstake_secret_key_init(&sk);
        ramstake_ciphertext_init(&c);

        ramstake_keygen(&sk, &pk, sk_seed, 0);

        ramstake_export_public_key(pk_bytes, pk);
        ramstake_export_secret_key(sk_bytes, sk);

        ramstake_import_public_key(&pk, pk_bytes);
        ramstake_encaps(&c, key1, pk, c_seed, 0);
        ramstake_export_ciphertext(c_bytes, c);

        ramstake_import_ciphertext(&c, c_bytes);
        ramstake_import_secret_key(&sk, sk_bytes);
        trial_success = (0 != ramstake_decaps(key2, c, sk, 0));
        trial_success &= (0 == strncmp((const char*)key1, (const char*)key2, RAMSTAKE_KEY_LENGTH));

        ramstake_public_key_destroy(pk);
        ramstake_secret_key_destroy(sk);
        ramstake_ciphertext_destroy(c);
    }
    clock_gettime(CLOCK_PROCESS_CPUTIME_ID, &clock_total_stop);

    /* free memory */
    free(sk_seed);
    free(c_seed);
    free(sk_bytes);
    free(pk_bytes);
    free(c_bytes);
    free(key1);
    free(key2);

    /* report on results */
    num_successes = num_trials - num_decaps_failures;
    printf("Success rate: %i/%i.\n", num_successes, num_trials);
    printf("Total time: %d\n", (clock_total_stop.tv_nsec - clock_total_start.tv_nsec)/1000.0/(1.0*num_trials));

    return 0;
}

